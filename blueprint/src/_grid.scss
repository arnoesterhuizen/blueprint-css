/* Grid calc function */
@function -blueprint-grid-width($n) {
	@return $n * $-blueprint-grid-width + ($n - 1) * $-blueprint-grid-gutter;
}
 
/* A container should group all your columns. */
.container {
	width: -blueprint-grid-width($-blueprint-grid-columns);
	margin: 0 auto;
}
 
/* Use this class on any .span / container to see the grid. */
.showgrid {
	background: url(src/grid.png);
}
 
/* Use these classes to set the width of a column. */
.column {
	float:left;
	margin-right:$-blueprint-grid-gutter;
}
 
/* The last column in a row needs this class. */
.last { margin-right: 0; }
 
@for $i from 1 through $-blueprint-grid-columns {
	.span-#{$i} {
		@extend .column;
	}
	.span-#{$i} {
		width: -blueprint-grid-width($i);
		@if $i == $-blueprint-grid-columns {
			margin-right:0;
		}
	}
}
 
/* Use these classes to set the width of an input. */
input.span {
	border-left-width: 1px;
	border-right-width: 1px;
	padding-left: $-blueprint-grid-gutter / 2;
	padding-right: $-blueprint-grid-gutter / 2;
}
@for $i from 1 through $-blueprint-grid-columns {
	input.span-#{$i},textarea.span-#{$i} {
		@extend input.span;
	}
	input.span-#{$i} {
		width:-blueprint-grid-width($i) - $-blueprint-grid-gutter - 2;
	}
}
@for $i from 1 through $-blueprint-grid-columns {
	textarea.span-#{$i} {
		@extend input.span-#{$i};
	}
}
 
/* Add these to a column to append empty cols. */
@for $i from 1 through ($-blueprint-grid-columns - 1) {
	.append-#{$i} {
		padding-right:-blueprint-grid-width($i) + $-blueprint-grid-gutter;
	}
}
 
/* Add these to a column to prepend empty cols. */
@for $i from 1 through ($-blueprint-grid-columns - 1) {
	.prepend-#{$i} {
		padding-left:-blueprint-grid-width($i) + $-blueprint-grid-gutter;
	}
}
 
/* Border on right hand side of a column. */
.border {
	padding-right: $-blueprint-grid-gutter / 2 - 1;
	margin-right: $-blueprint-grid-gutter / 2;
	border-right: 1px solid #ddd;
}
 
/* Border with more whitespace, spans one column. */
.colborder {
	padding-right: ($-blueprint-grid-width + 20) / 2 - 1;
	margin-right: ($-blueprint-grid-width + 20) / 2;
	border-right: 1px solid #ddd;
}
 
/* Use these classes on an element to push it into the next column, or to pull it into the previous column.	*/
.pull {
	float:left;
	position:relative;
}
@for $i from 1 through $-blueprint-grid-columns {
	.pull-#{$i},.push-#{$i} {
		@extend .pull
	}
	.pull-#{$i} {
		margin-left:- -blueprint-grid-width($i) - $-blueprint-grid-gutter;
	}
}
 
@for $i from 1 through $-blueprint-grid-columns {
	.push-#{$i} {
		margin:0 -(-blueprint-grid-width($i) + $-blueprint-grid-gutter) 1.5em (-blueprint-grid-width($i) + $-blueprint-grid-gutter);
	}
}
	
/* Misc classes and elements
-------------------------------------------------------------- */
 
/* In case you need to add a gutter above/below an element */
div.prepend-top, .prepend-top {
	margin-top:1.5em;
}
div.append-bottom, .append-bottom {
	margin-bottom:1.5em;
}
 
/* Use a .box to create a padded box inside a column.	*/
.box {
	padding: 1.5em;
	margin-bottom: 1.5em;
	background: #e5eCf9;
}
 
/* Use this to create a horizontal ruler across a column. */
hr {
	background: #ddd;
	color: #ddd;
	clear: both;
	float: none;
	width: 100%;
	height: 1px;
	margin: 0 0 17px;
	border: none;
	&.space {
		background: #fff;
		color: #fff;
		visibility: hidden;
	}
}
 
/* Clearing floats without extra markup
	 Based on How To Clear Floats Without Structural Markup by PiE
	 [http://www.positioniseverything.net/easyclearing.html] */
.clearfix, .container {
	display: block;
	&:after {
		content: "\0020";
		display: block;
		height: 0;
		clear: both;
		visibility: hidden;
		overflow:hidden;
	}
}
 
/* Regular clearing
	 apply to column that should drop below previous ones. */
 
.clear { clear:both; }